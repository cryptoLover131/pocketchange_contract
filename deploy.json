{
    "language": "Solidity",
    "sources": {
        "pocketchange.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\ncontract LPManagement is Ownable(msg.sender), Pausable, ReentrancyGuard {\r\n    // Aggregator for ETH-USD price feed\r\n    AggregatorV3Interface internal ethUsdPriceFeed;\r\n\r\n    // Struct to store Limited Partner data\r\n    struct LPData {\r\n        uint256 commitmentAmount;  // Total commitment by the LP\r\n        uint256 totalPaid;         // Amount already paid\r\n        uint256 remainingCommitment; // Remaining amount to be paid\r\n        uint256 commitmentPeriod; // Commitment Period\r\n        mapping(uint8 => uint256) tranchePayments;    // Payments made per tranche\r\n    }\r\n\r\n    // Struct to store tranche details\r\n    struct TrancheDetails {\r\n        uint256 percentage; // Percentage of the commitment for this tranche\r\n        uint256 deadline;     // Period (in seconds) after which this tranche is due\r\n    }\r\n\r\n    uint256 public minCommitmentAmountUSD = 1000 * 10**18;\r\n\r\n    // Struct to store Cash Call data\r\n    struct CashCall {\r\n        uint256 amount;   // Amount requested in the cash call\r\n        uint256 callInterval;  // Call interval duration\r\n        bool executed;    // Whether the cash call has been executed\r\n    }\r\n\r\n    // Mappings\r\n    mapping(address => LPData) public lpData;         // LP data by address\r\n    mapping(address => TrancheDetails[]) public lpTranches;   // Tranche details per LP\r\n    mapping(uint256 => CashCall) public cashCalls;    // Cash calls by ID\r\n\r\n    uint256 public totalCashCalls; // Total number of cash calls created\r\n\r\n    // Events\r\n    event CommitmentSet(address indexed lp, uint256 amountETH);\r\n    event PaymentMade(address indexed lp, uint256 amount, uint8 tranche);\r\n    event CashCallCreated(uint256 indexed callId, uint256 amount, uint256 callInterval);\r\n    event CashCallExecuted(uint256 indexed callId);\r\n    event PenaltyApplied(address indexed lp, uint256 penaltyAmount);\r\n    event TranchesForfeited(address indexed lp);\r\n    event AccessRevoked(address indexed lp);\r\n    event Withdrawal(address indexed to, uint256 amount);\r\n\r\n    constructor(address _aggregatorAddress) {\r\n        require(_aggregatorAddress != address(0), \"Invalid aggregator address\");\r\n        ethUsdPriceFeed = AggregatorV3Interface(_aggregatorAddress);\r\n    }\r\n\r\n    // Get ETH-USD exchange rate\r\n    function getETHUSDCExchangeRate() public view returns (uint256) {\r\n        (, int256 ethUsdPrice, , , ) = ethUsdPriceFeed.latestRoundData();\r\n        require(ethUsdPrice > 0, \"Invalid ETH/USD price data\");\r\n\r\n        // Chainlink price feeds typically return prices with 8 decimals.\r\n        return uint256(ethUsdPrice) * 1e10; // Adjust to 18 decimals for consistency\r\n    }\r\n\r\n    // Set commitment for a Limited Partner (Admin only)\r\n    function setCommitment(\r\n        address lp,\r\n        uint256 amountETH,\r\n        uint8[] memory percentages,\r\n        uint256[] memory periods\r\n    ) external onlyOwner whenNotPaused {\r\n        require(lp != address(0), \"Invalid LP address\");\r\n        require(amountETH * getETHUSDCExchangeRate() >= minCommitmentAmountUSD * 10**18, \"Commitment amount must be greater than minimum amount\");\r\n        require(percentages.length > 0, \"Percentages must not be empty\");\r\n        require(percentages.length == periods.length, \"Percentages and periods must match\");\r\n\r\n        uint256 totalPercentage;\r\n        for (uint8 i = 0; i < percentages.length; i++) {\r\n            totalPercentage += percentages[i];\r\n        }\r\n        require(totalPercentage == 100, \"Total percentage must equal 100\");\r\n\r\n        // Initialize LP data\r\n        LPData storage lpInfo = lpData[lp];\r\n        lpInfo.commitmentAmount = amountETH;\r\n        lpInfo.totalPaid = 0;\r\n        lpInfo.remainingCommitment = amountETH;\r\n        lpInfo.commitmentPeriod = periods[periods.length -1];\r\n        // Set tranche details\r\n        delete lpTranches[lp]; // Reset existing tranche details for the LP\r\n        for (uint8 i = 0; i < percentages.length; i++) {\r\n            lpTranches[lp].push(TrancheDetails({\r\n                percentage: percentages[i],\r\n                deadline: block.timestamp + (periods[i] * 1 days)\r\n            }));\r\n        }\r\n\r\n        emit CommitmentSet(lp, amountETH);\r\n    }\r\n\r\n    // Get all tranches periods and amounts\r\n    function getLPTranches(address lp) external view returns (uint256[] memory trancheDeadlines, uint256[] memory trancheAmounts) {\r\n        TrancheDetails[] storage tranches = lpTranches[lp];\r\n        LPData storage lpInfo = lpData[lp];\r\n        require(lpInfo.commitmentAmount > 0, \"Invalid LP\");\r\n\r\n        uint256 trancheCount = tranches.length;\r\n\r\n        trancheDeadlines = new uint256[](trancheCount);\r\n        trancheAmounts = new uint256[](trancheCount);\r\n\r\n        for (uint8 i = 0; i < trancheCount; i++) {\r\n            // Get tranche period\r\n            trancheDeadlines[i] = tranches[i].deadline;\r\n\r\n            // Calculate tranche amount based on the percentage\r\n            trancheAmounts[i] = (lpInfo.commitmentAmount * tranches[i].percentage) / 100;\r\n        }\r\n\r\n        return (trancheDeadlines, trancheAmounts);\r\n    }\r\n\r\n    // Create a new cash call (Admin only)\r\n    function createCashCall(uint256 amount, uint256 callInterval) external onlyOwner whenNotPaused {\r\n        require(amount > 0, \"Cash call amount must be greater than zero\");\r\n        require(callInterval > 0, \"Call interval must be greater than zero\");\r\n\r\n        cashCalls[totalCashCalls] = CashCall({\r\n            amount: amount,\r\n            callInterval: callInterval,\r\n            executed: false\r\n        });\r\n\r\n        emit CashCallCreated(totalCashCalls, amount, callInterval);\r\n        totalCashCalls++;\r\n    }\r\n\r\n    // Make a payment as an LP\r\n    function makePayment(uint8 tranche) external payable whenNotPaused nonReentrant {\r\n        LPData storage lp = lpData[msg.sender];\r\n        require(lp.commitmentAmount > 0, \"You are not an LP\");\r\n        require(tranche < lpTranches[msg.sender].length, \"Invalid tranche\");\r\n\r\n        TrancheDetails memory trancheDetails = lpTranches[msg.sender][tranche];\r\n        uint256 trancheCommitment = (lp.commitmentAmount * trancheDetails.percentage) / 100;\r\n\r\n        require(lp.tranchePayments[tranche] + msg.value <= trancheCommitment, \"Overpayment not allowed\");\r\n        require(block.timestamp <= trancheDetails.deadline, \"Tranche date was expired\");\r\n\r\n        lp.totalPaid += msg.value;\r\n        lp.remainingCommitment -= msg.value;\r\n        lp.tranchePayments[tranche] += msg.value;\r\n\r\n        emit PaymentMade(msg.sender, msg.value, tranche);\r\n    }\r\n\r\n    // Execute a cash call (Admin only)\r\n    function executeCashCall(uint256 callId) external onlyOwner whenNotPaused {\r\n        CashCall storage call = cashCalls[callId];\r\n        require(call.amount > 0, \"Cash call does not exist\");\r\n        require(!call.executed, \"Cash call already executed\");\r\n        require(block.timestamp >= call.callInterval, \"Cash call is not yet due\");\r\n\r\n        call.executed = true;\r\n\r\n        emit CashCallExecuted(callId);\r\n    }\r\n\r\n    // Apply penalties for missed deadlines\r\n    function applyPenalty(address lp, uint8 tranche, uint256 penaltyAmount, bool revokeAccess) external onlyOwner whenNotPaused {\r\n        LPData storage lpInfo = lpData[lp];\r\n        require(lpInfo.commitmentAmount > 0, \"Invalid LP\");\r\n\r\n        // Forfeit prior tranches\r\n        for (uint8 i = 0; i < tranche; i++) {\r\n            lpInfo.tranchePayments[i] = 0;\r\n        }\r\n        emit TranchesForfeited(lp);\r\n\r\n        // Apply late fee\r\n        lpInfo.remainingCommitment += penaltyAmount;\r\n        emit PenaltyApplied(lp, penaltyAmount);\r\n\r\n        // Revoke access if applicable\r\n        if (revokeAccess) {\r\n            lpInfo.commitmentAmount = 0;\r\n            lpInfo.remainingCommitment = 0;\r\n            emit AccessRevoked(lp);\r\n        }\r\n    }\r\n\r\n    // Set the minimun amount of commitment\r\n    function setMinCommitmentAmountUSD(uint256 minAmount) external onlyOwner whenNotPaused {\r\n        require(minAmount > 0, \"Minimum commitment amount must be greater than zero\");\r\n        minCommitmentAmountUSD = minAmount;\r\n    }\r\n\r\n    // Get next tranche data\r\n    function getNextTranche(address lp) external view returns (uint256 nextPercentage, uint256 nextDeadline) {\r\n        TrancheDetails[] storage tranches = lpTranches[lp];\r\n        require(tranches.length > 0, \"No tranches set for this LP\");\r\n\r\n        for (uint8 i = 0; i < tranches.length; i++) {\r\n            if (block.timestamp < tranches[i].deadline) {\r\n                return (tranches[i].percentage, tranches[i].deadline);\r\n            }\r\n        }\r\n\r\n        revert(\"No upcoming tranche found\");\r\n    }\r\n\r\n    // Check if a cash call is due\r\n    function isCallDue(uint256 callId) external view whenNotPaused returns (bool) {\r\n        CashCall storage call = cashCalls[callId];\r\n        return block.timestamp >= call.callInterval && !call.executed;\r\n    }\r\n\r\n    // Pause the contract (Admin only)\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    // Unpause the contract (Admin only)\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    // Withdraw Ether from the contract (Admin only)\r\n    function withdraw(uint256 amount) external onlyOwner whenNotPaused nonReentrant {\r\n        require(amount <= address(this).balance, \"Insufficient balance in contract\");\r\n        payable(owner()).transfer(amount);\r\n        emit Withdrawal(owner(), amount);\r\n    }\r\n\r\n    // Fallback function to receive Ether\r\n    receive() external payable whenNotPaused {}\r\n}"
        },
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
        },
        "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
        },
        "@openzeppelin/contracts/security/Pausable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
        },
        "@openzeppelin/contracts/access/Ownable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "": [
                    "ast"
                ],
                "*": [
                    "abi",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.legacyAssembly",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "evm.gasEstimates",
                    "evm.assembly"
                ]
            }
        },
        "remappings": []
    }
}