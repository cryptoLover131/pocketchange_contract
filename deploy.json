{
    "language": "Solidity",
    "sources": {
        "pocketchange.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\ncontract LPManagement is AccessControl, Pausable, ReentrancyGuard {\r\n    // Define an admin role identifier\r\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\r\n    // Store the list of admins\r\n    address[] private admins;\r\n    mapping(address => bool) private isAdmin;\r\n\r\n    // Aggregator for ETH-USD price feed\r\n    AggregatorV3Interface internal ethUsdPriceFeed;\r\n\r\n    // Struct to store Limited Partner data\r\n    struct LPData {\r\n        uint256 commitmentAmount;  // Total commitment by the LP\r\n        uint256 totalPaid;         // Amount already paid\r\n        uint256 endTime; // Commitment Period\r\n    }\r\n\r\n    uint256 public minCommitmentAmountUSD = 1000 * 10**18;\r\n\r\n    // Struct to store Cash Call data\r\n    struct CashCall {\r\n        uint256 amount;   // Amount requested in the cash call\r\n        uint256 paidAmount;   // Amount paid towards the cash call\r\n        uint256 deadline;  // Call interval duration\r\n        bool executed;    // Whether the cash call has been executed\r\n    }\r\n\r\n    // Mappings\r\n    mapping(address => LPData) public lpData;         // LP data by address\r\n    mapping(address => CashCall[]) public cashCalls;    // Cash calls by LP address\r\n\r\n    // Events\r\n    event CommitmentSet(address indexed lp, uint256 amountETH, uint256 endTime);\r\n    event PaymentMade(address indexed lp, uint256 amount, uint256 callId);\r\n    event CashCallCreated(uint256 callId, uint256 amount, uint256 deadline);\r\n    event CashCallExecuted(address indexed lp, uint256 callId);\r\n    event CashCallExecutionReverted(address indexed lp, uint256 callId);\r\n    event PenaltyApplied(address indexed lp, uint256 penaltyAmount);\r\n    event AccessRevoked(address indexed lp);\r\n    event Withdrawal(address indexed to, uint256 amount);\r\n    event AdminAdded(address indexed account);\r\n    event AdminRemoved(address indexed account);\r\n\r\n    constructor(address _aggregatorAddress, address _defaultAdmin) {\r\n        require(_aggregatorAddress != address(0), \"Invalid aggregator address\");\r\n        ethUsdPriceFeed = AggregatorV3Interface(_aggregatorAddress);\r\n\r\n        // Grant the deployer the admin role\r\n        _grantRole(ADMIN_ROLE, _defaultAdmin);\r\n\r\n        _grantRole(ADMIN_ROLE, msg.sender);\r\n\r\n        // Grant the deployer the default admin role, which allows managing roles\r\n        _grantRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\r\n    }\r\n\r\n    // Get ETH-USD exchange rate\r\n    function getETHUSDCExchangeRate() public view returns (uint256) {\r\n        (, int256 ethUsdPrice, , , ) = ethUsdPriceFeed.latestRoundData();\r\n        require(ethUsdPrice > 0, \"Invalid ETH/USD price data\");\r\n\r\n        // Chainlink price feeds typically return prices with 8 decimals.\r\n        return uint256(ethUsdPrice) * 1e10; // Adjust to 18 decimals for consistency\r\n    }\r\n\r\n    // Set commitment for a Limited Partner (Admin only)\r\n    function setCommitment(\r\n        address _lp,\r\n        uint256 _amountETH,\r\n        uint256 _endTime\r\n    ) external onlyRole(ADMIN_ROLE) whenNotPaused {\r\n        require(_lp != address(0), \"Invalid LP address\");\r\n        require(!isLP(_lp), \"LP already exists\");\r\n        require(_amountETH * getETHUSDCExchangeRate() >= minCommitmentAmountUSD * 10**18, \"Commitment amount must be greater than minimum amount\");\r\n        require(_endTime > block.timestamp, \"End Time must be later than the current time.\");\r\n\r\n        // Initialize LP data\r\n        LPData storage lpInfo = lpData[_lp];\r\n        lpInfo.commitmentAmount = _amountETH;\r\n        lpInfo.totalPaid = 0;\r\n        lpInfo.endTime = _endTime;\r\n\r\n        emit CommitmentSet(_lp, _amountETH, _endTime);\r\n    }\r\n\r\n    // Create a new cash call (Admin only)\r\n    function createCashCall(address _lp, uint256 _amount, uint256 _deadline) external onlyRole(ADMIN_ROLE) whenNotPaused {\r\n        require(isLP(_lp), \"Not an LP!\");\r\n        require(_amount > 0, \"Cash call amount must be greater than zero\");\r\n        require(_deadline > block.timestamp && _deadline <= lpData[_lp].endTime, \"Deadline must be later than the current time.\");\r\n        // Check if there are existing cash calls and compare with the last one\r\n        CashCall[] storage existingCalls = cashCalls[_lp];\r\n        if (existingCalls.length > 0) {\r\n            uint256 lastDeadline = existingCalls[existingCalls.length - 1].deadline;\r\n            require(_deadline > lastDeadline, \"New deadline must be after the last deadline\");\r\n        }\r\n\r\n        // Add the new CashCall\r\n        cashCalls[_lp].push(CashCall(_amount, 0, _deadline, false));  // Add the new CashCall with initial values\r\n        emit CashCallCreated(existingCalls.length, _amount, _deadline);\r\n    }\r\n\r\n    // Make a payment (LP only)\r\n    function makePayment(address _lp, uint256 _callId) external payable whenNotPaused nonReentrant {\r\n        require(isLP(_lp), \"You are not an LP\");\r\n\r\n        // Retrieve the cash call for the LP and call ID\r\n        CashCall storage cashCall = cashCalls[_lp][_callId];\r\n        require(cashCall.amount > 0, \"Cash call does not exist\");\r\n\r\n        // Check if the cash call has been executed or if the deadline has passed\r\n        require(!cashCall.executed, \"Cash call already executed\");\r\n\r\n        // Update the paid amount for the cash call\r\n        cashCall.paidAmount += msg.value;\r\n\r\n        // Update LP Data\r\n        lpData[msg.sender].totalPaid += msg.value;\r\n\r\n        // Emit an event to notify that payment has been made\r\n        emit PaymentMade(_lp, msg.value, _callId);\r\n    }\r\n\r\n    // Execute a cash call (Admin only)\r\n    function executeCashCall(address _lp, uint256 _callId) external onlyRole(ADMIN_ROLE) whenNotPaused {\r\n        CashCall storage call = cashCalls[_lp][_callId];\r\n        require(call.amount > 0, \"Cash call does not exist\");\r\n        require(!call.executed, \"Cash call already executed\");\r\n\r\n        // Execute the cash call logic\r\n        call.executed = true;\r\n\r\n        emit CashCallExecuted(_lp, _callId);\r\n    }\r\n\r\n    // Revert the execution of a cash call (Admin only)\r\n    function revertExecution(address _lp, uint256 _callId) external onlyRole(ADMIN_ROLE) whenNotPaused {\r\n        require(isLP(_lp), \"Not an LP!\");\r\n        CashCall storage call = cashCalls[_lp][_callId];\r\n        require(call.amount > 0, \"Cash call does not exist\");\r\n        require(call.executed, \"Cash call not executed yet\");\r\n\r\n        // Revert the executed flag back to false\r\n        call.executed = false;\r\n\r\n        emit CashCallExecutionReverted(_lp, _callId);\r\n    }\r\n\r\n    // Apply penalties for missed deadlines\r\n    function applyPenalty(address _lp, uint256 _penaltyAmount, bool _revokeAccess) external onlyRole(ADMIN_ROLE) whenNotPaused {\r\n        LPData storage lpInfo = lpData[_lp];\r\n        require(lpInfo.commitmentAmount > 0, \"Invalid LP\");\r\n\r\n        // Apply late fee\r\n        lpInfo.totalPaid -= _penaltyAmount;\r\n        emit PenaltyApplied(_lp, _penaltyAmount);\r\n\r\n        // Revoke access if applicable\r\n        if (_revokeAccess) {\r\n            lpInfo.commitmentAmount = 0;\r\n            lpInfo.totalPaid = 0;\r\n            emit AccessRevoked(_lp);\r\n        }\r\n    }\r\n\r\n    // Set the minimun amount of commitment\r\n    function setMinCommitmentAmountUSD(uint256 _minAmount) external onlyRole(ADMIN_ROLE) whenNotPaused {\r\n        require(_minAmount > 0, \"Minimum commitment amount must be greater than zero\");\r\n        minCommitmentAmountUSD = _minAmount;\r\n    }\r\n\r\n    // Check if an LP address exists in lpData\r\n    function isLP(address _lp) public view returns (bool) {\r\n        return lpData[_lp].commitmentAmount > 0;\r\n    }\r\n\r\n    // Pause the contract (Admin only)\r\n    function pause() external onlyRole(ADMIN_ROLE) {\r\n        _pause();\r\n    }\r\n\r\n    // Unpause the contract (Admin only)\r\n    function unpause() external onlyRole(ADMIN_ROLE) {\r\n        _unpause();\r\n    }\r\n\r\n    // Withdraw Ether from the contract (Admin only)\r\n    function withdraw(uint256 _amount, address _to) external onlyRole(ADMIN_ROLE) whenNotPaused nonReentrant {\r\n        require(_amount <= address(this).balance, \"Insufficient balance in contract\");\r\n        payable(_to).transfer(_amount);\r\n        emit Withdrawal(_to, _amount);\r\n    }\r\n\r\n    // Add a new admin\r\n    function addAdmin(address _account) external onlyRole(ADMIN_ROLE) {\r\n        require(_account != address(0), \"Invalid address\");\r\n        require(!isAdmin[_account], \"Already an admin\");\r\n\r\n        // Add the new admin\r\n        admins.push(_account);\r\n        isAdmin[_account] = true;\r\n\r\n        grantRole(ADMIN_ROLE, _account);\r\n        emit AdminAdded(_account);\r\n    }\r\n\r\n    // Remove an admin\r\n    function removeAdmin(address _account) external onlyRole(ADMIN_ROLE) {\r\n        require(_account != address(0), \"Invalid address\");\r\n        require(isAdmin[_account], \"Not an admin\");\r\n\r\n        // Prevent removing the last admin\r\n        require(admins.length > 1, \"Cannot remove the last admin\");\r\n\r\n        // Remove admin\r\n        isAdmin[_account] = false;\r\n\r\n        // Remove from the admins array\r\n        for (uint256 i = 0; i < admins.length; i++) {\r\n            if (admins[i] == _account) {\r\n                admins[i] = admins[admins.length - 1];\r\n                admins.pop();\r\n                break;\r\n            }\r\n        }\r\n\r\n        revokeRole(ADMIN_ROLE, _account);\r\n        emit AdminRemoved(_account);\r\n    }\r\n\r\n    // Get the list of admins\r\n    function getAdmins() external view returns (address[] memory) {\r\n        return admins;\r\n    }\r\n\r\n    // Get the number of admins\r\n    function getAdminCount() external view returns (uint256) {\r\n        return admins.length;\r\n    }\r\n\r\n    // Fallback function to receive Ether\r\n    receive() external payable whenNotPaused {}\r\n}"
        },
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
        },
        "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
        },
        "@openzeppelin/contracts/security/Pausable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
        },
        "@openzeppelin/contracts/access/AccessControl.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
        },
        "@openzeppelin/contracts/access/IAccessControl.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "": [
                    "ast"
                ],
                "*": [
                    "abi",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.legacyAssembly",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "evm.gasEstimates",
                    "evm.assembly"
                ]
            }
        },
        "remappings": []
    }
}